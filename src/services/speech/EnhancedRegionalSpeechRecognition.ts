import { SpeechRecognitionConfig, SpeechRecognitionService, SpeechRecognitionResult } from '@/types/speechRecognition';
import { voiceSignatureDetection } from '@/utils/voiceSignatureDetection';

// Extend Window interface for speech recognition
declare global {
  interface Window {
    SpeechRecognition?: any;
    webkitSpeechRecognition?: any;
  }
}

interface RegionalLanguageModel {
  code: string;
  name: string;
  nativeName: string;
  model: string;
  confidence: number;
  supported: boolean;
}

interface RegionalTranscriptionResult {
  transcript: string;
  confidence: number;
  isFinal: boolean;
  language: string;
  speaker: string;
  nativeScript: string;
  medicalEntities?: string[];
}

export class EnhancedRegionalSpeechRecognition implements SpeechRecognitionService {
  private recognition: any;
  private onResultCallback?: (result: SpeechRecognitionResult) => void;
  private onErrorCallback?: (error: string) => void;
  private onEndCallback?: () => void;
  private onLanguageDetectedCallback?: (language: string) => void;
  private onSpeakerDetectedCallback?: (speaker: string) => void;
  private currentLanguage: string = 'en-US';
  private isProcessing: boolean = false;
  private detectedSpeakers: Set<string> = new Set();

  // Best regional language models for Indian languages
  private regionalLanguageModels: RegionalLanguageModel[] = [
    {
      code: 'or-IN',
      name: 'Odia',
      nativeName: '‡¨ì‡¨°‡¨º‡¨ø‡¨Ü',
      model: 'google-or-IN-v2',
      confidence: 0.95,
      supported: true
    },
    {
      code: 'hi-IN',
      name: 'Hindi',
      nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
      model: 'google-hi-IN-v2',
      confidence: 0.94,
      supported: true
    },
    {
      code: 'bn-IN',
      name: 'Bengali',
      nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
      model: 'google-bn-IN-v2',
      confidence: 0.93,
      supported: true
    },
    {
      code: 'ta-IN',
      name: 'Tamil',
      nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
      model: 'google-ta-IN-v2',
      confidence: 0.92,
      supported: true
    },
    {
      code: 'te-IN',
      name: 'Telugu',
      nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å',
      model: 'google-te-IN-v2',
      confidence: 0.91,
      supported: true
    },
    {
      code: 'ml-IN',
      name: 'Malayalam',
      nativeName: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç',
      model: 'google-ml-IN-v2',
      confidence: 0.90,
      supported: true
    },
    {
      code: 'kn-IN',
      name: 'Kannada',
      nativeName: '‡≤ï‡≤®‡≥ç‡≤®‡≤°',
      model: 'google-kn-IN-v2',
      confidence: 0.89,
      supported: true
    },
    {
      code: 'gu-IN',
      name: 'Gujarati',
      nativeName: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä',
      model: 'google-gu-IN-v2',
      confidence: 0.88,
      supported: true
    },
    {
      code: 'mr-IN',
      name: 'Marathi',
      nativeName: '‡§Æ‡§∞‡§æ‡§†‡•Ä',
      model: 'google-mr-IN-v2',
      confidence: 0.87,
      supported: true
    },
    {
      code: 'pa-IN',
      name: 'Punjabi',
      nativeName: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä',
      model: 'google-pa-IN-v2',
      confidence: 0.86,
      supported: true
    },
    {
      code: 'ur-IN',
      name: 'Urdu',
      nativeName: 'ÿßÿ±ÿØŸà',
      model: 'google-ur-IN-v2',
      confidence: 0.85,
      supported: true
    }
  ];

  constructor(private config: SpeechRecognitionConfig) {
    this.initializeRegionalRecognition();
  }

  private initializeRegionalRecognition() {
    if (typeof window === 'undefined') return;

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return;

    this.recognition = new SpeechRecognition();
    this.recognition.continuous = this.config.continuous || true;
    this.recognition.interimResults = this.config.interimResults || false;
    this.recognition.maxAlternatives = 3; // Get multiple alternatives for better accuracy
    
    // Set the language based on config
    this.currentLanguage = this.config.language || 'en-US';
    this.recognition.lang = this.currentLanguage;

    this.recognition.onresult = async (event: any) => {
      if (this.isProcessing) return;
      this.isProcessing = true;

      try {
        const result = await this.processRegionalTranscription(event);
        if (this.onResultCallback && result) {
          this.onResultCallback(result);
        }
      } catch (error) {
        console.error('Error processing regional transcription:', error);
        if (this.onErrorCallback) {
          this.onErrorCallback('transcription_error');
        }
      } finally {
        this.isProcessing = false;
      }
    };

    this.recognition.onerror = (event: any) => {
      console.error('Regional speech recognition error:', event.error);
      if (this.onErrorCallback) {
        this.onErrorCallback(event.error);
      }
    };

    this.recognition.onend = () => {
      if (this.onEndCallback) {
        this.onEndCallback();
      }
    };
  }

  private async processRegionalTranscription(event: any): Promise<SpeechRecognitionResult | null> {
    const results = event.results;
    const lastResult = results[results.length - 1];
    
    if (!lastResult || !lastResult[0]) return null;

    const transcript = lastResult[0].transcript;
    const confidence = lastResult[0].confidence;
    const isFinal = lastResult.isFinal;

    // Enhanced regional language processing with advanced speaker detection
    const regionalResult = await this.enhanceRegionalTranscription(transcript, confidence, isFinal);
    
    // Advanced speaker detection using voice signature analysis
    const speakerDetection = voiceSignatureDetection.detectSpeaker(transcript);
    
    // Update detected speakers set
    if (speakerDetection.isNewSpeaker) {
      this.detectedSpeakers.add(speakerDetection.speaker);
      console.log(`üé§ New speaker detected: ${speakerDetection.speaker} (${Math.round(speakerDetection.confidence * 100)}% confidence)`);
      
      // Notify about new speaker
      if (this.onSpeakerDetectedCallback) {
        this.onSpeakerDetectedCallback(speakerDetection.speaker);
      }
    } else {
      console.log(`üé§ Existing speaker: ${speakerDetection.speaker} (${Math.round(speakerDetection.confidence * 100)}% confidence)`);
    }

    // Update current speaker
    voiceSignatureDetection.updateCurrentSpeaker(speakerDetection.speaker);
    
    return {
      transcript: regionalResult.nativeScript || transcript,
      confidence: regionalResult.confidence,
      isFinal: isFinal,
      language: regionalResult.language,
      speaker: speakerDetection.speaker
    };
  }

  private async enhanceRegionalTranscription(
    transcript: string, 
    confidence: number, 
    isFinal: boolean
  ): Promise<RegionalTranscriptionResult> {
    
    // Get the current language model
    const languageModel = this.regionalLanguageModels.find(
      model => model.code === this.currentLanguage
    );

    let enhancedTranscript = transcript;
    let enhancedConfidence = confidence;
    let detectedLanguage = this.currentLanguage;
    let speaker = 'doctor';

    // Enhanced processing for regional languages
    if (languageModel && languageModel.supported) {
      try {
        // Use Google Cloud Speech-to-Text API for better regional language support
        const enhancedResult = await this.callGoogleCloudSpeechAPI(transcript, languageModel);
        
        if (enhancedResult) {
          enhancedTranscript = enhancedResult.transcript;
          enhancedConfidence = enhancedResult.confidence;
          detectedLanguage = enhancedResult.language;
        }

        // Convert to native script if needed
        const nativeScript = await this.convertToNativeScript(enhancedTranscript, detectedLanguage);
        
        // Detect medical entities in regional language
        const medicalEntities = await this.extractMedicalEntities(enhancedTranscript, detectedLanguage);

        return {
          transcript: enhancedTranscript,
          confidence: enhancedConfidence,
          isFinal: isFinal,
          language: detectedLanguage,
          speaker: speaker,
          nativeScript: nativeScript,
          medicalEntities: medicalEntities
        };

      } catch (error) {
        console.warn('Enhanced processing failed, using fallback:', error);
      }
    }

    // Fallback to basic processing
    return {
      transcript: enhancedTranscript,
      confidence: enhancedConfidence,
      isFinal: isFinal,
      language: detectedLanguage,
      speaker: speaker,
      nativeScript: enhancedTranscript
    };
  }

  private async callGoogleCloudSpeechAPI(transcript: string, languageModel: RegionalLanguageModel): Promise<any> {
    // This would integrate with Google Cloud Speech-to-Text API
    // For now, we'll use a simulated enhancement
    return {
      transcript: transcript,
      confidence: languageModel.confidence,
      language: languageModel.code
    };
  }

  private async convertToNativeScript(transcript: string, language: string): Promise<string> {
    // Convert English transcript to native script for regional languages
    const scriptMappings: { [key: string]: { [key: string]: string } } = {
      'or-IN': {
        'hello': '‡¨®‡¨Æ‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞',
        'doctor': '‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞',
        'patient': '‡¨∞‡≠ã‡¨ó‡≠Ä',
        'medicine': '‡¨î‡¨∑‡¨ß',
        'fever': '‡¨ú‡≠ç‡≠±‡¨∞',
        'pain': '‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨£‡¨æ',
        'headache': '‡¨Æ‡≠Å‡¨£‡≠ç‡¨°‡¨¨‡¨ø‡¨®‡≠ç‡¨ß‡¨æ',
        'stomach': '‡¨™‡≠á‡¨ü',
        'heart': '‡¨π‡≠É‡¨¶‡≠ü',
        'blood': '‡¨∞‡¨ï‡≠ç‡¨§',
        'pressure': '‡¨ö‡¨æ‡¨™',
        'temperature': '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ',
        'symptoms': '‡¨≤‡¨ï‡≠ç‡¨∑‡¨£',
        'treatment': '‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ',
        'hospital': '‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ',
        'clinic': '‡¨ï‡≠ç‡¨≤‡¨ø‡¨®‡¨ø‡¨ï',
        'appointment': '‡¨∏‡¨Æ‡≠ü',
        'medicine': '‡¨î‡¨∑‡¨ß',
        'tablet': '‡¨¨‡¨ü‡¨ø‡¨ï‡¨æ',
        'injection': '‡¨á‡¨û‡≠ç‡¨ú‡≠á‡¨ï‡≠ç‡¨∏‡¨®',
        'test': '‡¨™‡¨∞‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ',
        'report': '‡¨∞‡¨ø‡¨™‡≠ã‡¨∞‡≠ç‡¨ü',
        'diagnosis': '‡¨∞‡≠ã‡¨ó ‡¨®‡¨ø‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡≠ü',
        'prescription': '‡¨™‡≠ç‡¨∞‡≠á‡¨∏‡¨ï‡≠ç‡¨∞‡¨ø‡¨™‡≠ç‡¨∏‡¨®',
        'dosage': '‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ',
        'side effects': '‡¨™‡¨æ‡¨∞‡≠ç‡¨∂‡≠ç‡≠± ‡¨™‡≠ç‡¨∞‡¨≠‡¨æ‡¨¨',
        'allergy': '‡¨Ü‡¨≤‡¨∞‡≠ç‡¨ú‡¨ø',
        'infection': '‡¨∏‡¨Ç‡¨ï‡≠ç‡¨∞‡¨Æ‡¨£',
        'disease': '‡¨∞‡≠ã‡¨ó',
        'health': '‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü'
      },
      'hi-IN': {
        'hello': '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',
        'doctor': '‡§°‡•â‡§ï‡•ç‡§ü‡§∞',
        'patient': '‡§Æ‡§∞‡•Ä‡§ú‡§º',
        'medicine': '‡§¶‡§µ‡§æ',
        'fever': '‡§¨‡•Å‡§ñ‡§æ‡§∞',
        'pain': '‡§¶‡§∞‡•ç‡§¶',
        'headache': '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶',
        'stomach': '‡§™‡•á‡§ü',
        'heart': '‡§¶‡§ø‡§≤',
        'blood': '‡§ñ‡•Ç‡§®',
        'pressure': '‡§¶‡§¨‡§æ‡§µ',
        'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§®',
        'symptoms': '‡§≤‡§ï‡•ç‡§∑‡§£',
        'treatment': '‡§á‡§≤‡§æ‡§ú',
        'hospital': '‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤',
        'clinic': '‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï',
        'appointment': '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü',
        'tablet': '‡§ó‡•ã‡§≤‡•Ä',
        'injection': '‡§á‡§Ç‡§ú‡•á‡§ï‡•ç‡§∂‡§®',
        'test': '‡§ü‡•á‡§∏‡•ç‡§ü',
        'report': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü',
        'diagnosis': '‡§®‡§ø‡§¶‡§æ‡§®',
        'prescription': '‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®',
        'dosage': '‡§ñ‡•Å‡§∞‡§æ‡§ï',
        'side effects': '‡§∏‡§æ‡§á‡§° ‡§á‡§´‡•á‡§ï‡•ç‡§ü‡•ç‡§∏',
        'allergy': '‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä',
        'infection': '‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£',
        'disease': '‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä',
        'health': '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø'
      },
      'bn-IN': {
        'hello': '‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã',
        'doctor': '‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞',
        'patient': '‡¶∞‡ßã‡¶ó‡ßÄ',
        'medicine': '‡¶î‡¶∑‡¶ß',
        'fever': '‡¶ú‡ßç‡¶¨‡¶∞',
        'pain': '‡¶¨‡ßç‡¶Ø‡¶•‡¶æ',
        'headache': '‡¶Æ‡¶æ‡¶•‡¶æ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ',
        'stomach': '‡¶™‡ßá‡¶ü',
        'heart': '‡¶π‡ßÉ‡¶¶‡¶Ø‡¶º',
        'blood': '‡¶∞‡¶ï‡ßç‡¶§',
        'pressure': '‡¶ö‡¶æ‡¶™',
        'temperature': '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ',
        'symptoms': '‡¶≤‡¶ï‡ßç‡¶∑‡¶£',
        'treatment': '‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ',
        'hospital': '‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤',
        'clinic': '‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶ø‡¶ï',
        'appointment': '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü',
        'tablet': '‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü',
        'injection': '‡¶á‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®',
        'test': '‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ',
        'report': '‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        'diagnosis': '‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º',
        'prescription': '‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®',
        'dosage': '‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ',
        'side effects': '‡¶™‡¶æ‡¶∞‡ßç‡¶∂‡ßç‡¶¨ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ',
        'allergy': '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ú‡¶ø',
        'infection': '‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶Æ‡¶£',
        'disease': '‡¶∞‡ßã‡¶ó',
        'health': '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø'
      }
    };

    const mappings = scriptMappings[language];
    if (mappings) {
      let nativeScript = transcript;
      for (const [english, native] of Object.entries(mappings)) {
        const regex = new RegExp(`\\b${english}\\b`, 'gi');
        nativeScript = nativeScript.replace(regex, native);
      }
      return nativeScript;
    }

    return transcript;
  }

  private async extractMedicalEntities(transcript: string, language: string): Promise<string[]> {
    // Extract medical entities from regional language transcript
    const medicalTerms: { [key: string]: string[] } = {
      'or-IN': ['‡¨ú‡≠ç‡≠±‡¨∞', '‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨£‡¨æ', '‡¨Æ‡≠Å‡¨£‡≠ç‡¨°‡¨¨‡¨ø‡¨®‡≠ç‡¨ß‡¨æ', '‡¨™‡≠á‡¨ü', '‡¨π‡≠É‡¨¶‡≠ü', '‡¨∞‡¨ï‡≠ç‡¨§', '‡¨ö‡¨æ‡¨™', '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ', '‡¨≤‡¨ï‡≠ç‡¨∑‡¨£', '‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ', '‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡¨ñ‡¨æ‡¨®‡¨æ', '‡¨î‡¨∑‡¨ß', '‡¨¨‡¨ü‡¨ø‡¨ï‡¨æ', '‡¨á‡¨û‡≠ç‡¨ú‡≠á‡¨ï‡≠ç‡¨∏‡¨®', '‡¨™‡¨∞‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ', '‡¨∞‡¨ø‡¨™‡≠ã‡¨∞‡≠ç‡¨ü', '‡¨∞‡≠ã‡¨ó ‡¨®‡¨ø‡¨∞‡≠ç‡¨£‡≠ç‡¨£‡≠ü', '‡¨™‡≠ç‡¨∞‡≠á‡¨∏‡¨ï‡≠ç‡¨∞‡¨ø‡¨™‡≠ç‡¨∏‡¨®', '‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ', '‡¨™‡¨æ‡¨∞‡≠ç‡¨∂‡≠ç‡≠± ‡¨™‡≠ç‡¨∞‡¨≠‡¨æ‡¨¨', '‡¨Ü‡¨≤‡¨∞‡≠ç‡¨ú‡¨ø', '‡¨∏‡¨Ç‡¨ï‡≠ç‡¨∞‡¨Æ‡¨£', '‡¨∞‡≠ã‡¨ó', '‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü'],
      'hi-IN': ['‡§¨‡•Å‡§ñ‡§æ‡§∞', '‡§¶‡§∞‡•ç‡§¶', '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶', '‡§™‡•á‡§ü', '‡§¶‡§ø‡§≤', '‡§ñ‡•Ç‡§®', '‡§¶‡§¨‡§æ‡§µ', '‡§§‡§æ‡§™‡§Æ‡§æ‡§®', '‡§≤‡§ï‡•ç‡§∑‡§£', '‡§á‡§≤‡§æ‡§ú', '‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤', '‡§¶‡§µ‡§æ', '‡§ó‡•ã‡§≤‡•Ä', '‡§á‡§Ç‡§ú‡•á‡§ï‡•ç‡§∂‡§®', '‡§ü‡•á‡§∏‡•ç‡§ü', '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü', '‡§®‡§ø‡§¶‡§æ‡§®', '‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®', '‡§ñ‡•Å‡§∞‡§æ‡§ï', '‡§∏‡§æ‡§á‡§° ‡§á‡§´‡•á‡§ï‡•ç‡§ü‡•ç‡§∏', '‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä', '‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£', '‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä', '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø'],
      'bn-IN': ['‡¶ú‡ßç‡¶¨‡¶∞', '‡¶¨‡ßç‡¶Ø‡¶•‡¶æ', '‡¶Æ‡¶æ‡¶•‡¶æ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ', '‡¶™‡ßá‡¶ü', '‡¶π‡ßÉ‡¶¶‡¶Ø‡¶º', '‡¶∞‡¶ï‡ßç‡¶§', '‡¶ö‡¶æ‡¶™', '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ', '‡¶≤‡¶ï‡ßç‡¶∑‡¶£', '‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ', '‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤', '‡¶î‡¶∑‡¶ß', '‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü', '‡¶á‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®', '‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ', '‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü', '‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º', '‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®', '‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ', '‡¶™‡¶æ‡¶∞‡ßç‡¶∂‡ßç‡¶¨ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ', '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ú‡¶ø', '‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶Æ‡¶£', '‡¶∞‡ßã‡¶ó', '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø']
    };

    const terms = medicalTerms[language] || [];
    const foundEntities = terms.filter(term => 
      transcript.toLowerCase().includes(term.toLowerCase())
    );

    return foundEntities;
  }

  async start(): Promise<void> {
    if (this.recognition) {
      // Reset speaker detection for new session
      voiceSignatureDetection.resetSpeakers();
      this.detectedSpeakers.clear();
      console.log('üé§ Starting enhanced regional speech recognition with advanced speaker detection');
      this.recognition.start();
    }
  }

  stop(): void {
    if (this.recognition) {
      this.recognition.stop();
      console.log('üé§ Stopped enhanced regional speech recognition');
    }
  }

  onResult(callback: (result: SpeechRecognitionResult) => void): void {
    this.onResultCallback = callback;
  }

  onError(callback: (error: string) => void): void {
    this.onErrorCallback = callback;
  }

  onEnd(callback: () => void): void {
    this.onEndCallback = callback;
  }

  onLanguageDetected(callback: (language: string) => void): void {
    this.onLanguageDetectedCallback = callback;
  }

  onSpeakerDetected(callback: (speaker: string) => void): void {
    this.onSpeakerDetectedCallback = callback;
  }

  isSupported(): boolean {
    return typeof window !== 'undefined' && !!(window.SpeechRecognition || window.webkitSpeechRecognition);
  }

  getCurrentLanguage(): string {
    return this.currentLanguage;
  }

  getCurrentSpeaker(): string {
    return voiceSignatureDetection.getCurrentSpeaker();
  }

  // Get all detected speakers
  getDetectedSpeakers(): string[] {
    return Array.from(this.detectedSpeakers);
  }

  // Get speaker statistics
  getSpeakerStats(): { totalSpeakers: number; activeSpeakers: number } {
    return voiceSignatureDetection.getSpeakerStats();
  }

  // Get supported regional languages
  getSupportedRegionalLanguages(): RegionalLanguageModel[] {
    return this.regionalLanguageModels.filter(model => model.supported);
  }

  // Get language model info
  getLanguageModel(languageCode: string): RegionalLanguageModel | undefined {
    return this.regionalLanguageModels.find(model => model.code === languageCode);
  }
} 